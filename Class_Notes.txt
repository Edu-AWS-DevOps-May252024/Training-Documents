https://github.com/Edu-AWS-DevOps-May252024
=====================================
AWS DevOps Certification Programme
Start Date : 25th May 2024

######################
Day 1 - 25th May 2024
######################

	What is DevOps ???
	
		- CI/CD 
		
	Why we need DevOps ?
	
	Benefits ?
	
	Why to used DevOps on Cloud ?
	
	
	Software Development Lifecycle :::
	
	Software Application :::
	
		Desktop Applications
		Web Applications
		Mobile Applications
		System Applications 
		Embedded Applications 

			Web Applications --> Online Training portal
			Desktop Applications --> Billing System - Supermarket 
						Requirement 
							- Functions - 
							= User Interface Design
							- Inventory Management
							- Billing 
							- Payment
							- Delivery

	- Requirement Analysis 
	- Design/Documentation
	- Coding/Development 
	- Testing 
	- Implementation 
	- Monitoring/Maintain
	
	Waterfall Model :
		- It is linear in fashion 
		- Strictly follows the Top-Down Approach
		- Monolith Applications were developed using this Model
		

			Desktop Applications --> Billing System - Supermarket 	==> 12 Months 
						Requirement 
							- Functions 
							- User Interface Design
							- Inventory Management
							- Billing 
							- Payment -> cash/card/upi
							- Delivery

		Core-Project :  12 Months
		- Requirement Analysis 
		- Design/Documentation
		- Coding/Development 			
		- Testing 
		- Implementation 
		- Monitoring/Maintain		
		
		Enhancement-Project :  
		- Requirement Analysis 
		- Design/Documentation
		- Coding/Development 			
		- Testing 
		- Implementation 
		- Monitoring/Maintain	
	
	AGILE Methodologies ::: SDLC 

			Desktop Applications --> Billing System - Supermarket 	==> 12 Months 
						Requirement 
							- Functions/Module --> Iterations 
								- User Interface Design
								- Inventory Management
								- Billing 
								- Payment -> cash			- New feature - /card/upi
								- Delivery
							
		- Requirement Analysis 
		- Design/Documentation
		- Coding/Development 
		- Testing 
		- Implementation for further release with manual approvals
		- Monitoring/Maintain

		Iteration 1 - User Interface Design		- Developer1
			- Requirement Analysis 
			- Design/Documentation
			- Coding/Development 
			- Testing 
			- Implementation for further release with manual approvals
			- Monitoring/Maintain			

		Iteration 2 - Inventory Management		- Developer2
			- Requirement Analysis 
			- Design/Documentation
			- Coding/Development 
			- Testing 
			- Implementation for further release with manual approvals
			- Monitoring/Maintain		

		Iteration nth - New Feature
			- Requirement Analysis 
			- Design/Documentation
			- Coding/Development 
			- Testing 
			- Implementation for further release with manual approvals
			- Monitoring/Maintain
			
		Using AGILE Methodologies :
		
			We can able to achieve :
			
				- Continous Development 
				- Continous Integration 
				- Continous Testing 
				- Continous Delivery
					- It expects Manual Approvals for production release
					- Might leads to downtime.
			
			We cannot achieve :
			
				- Continous Deployment
					- It Doesn't expect any Manual Approvals for production release.
					- Production Release can be fully automated without any manual intervension
					- Zero Downtime.
					
					
	DevOps :::
	
		DevOps is a Software Development Strategy/Process which helps to promote the collaboration between the teams like Development Team and Operations Team to achieve Continous Development, Continous Integration, Continous Testing, Continous Delivery, Continous Deployment and Continous Monitoring in more automated fashion.
		
	How to Implement DevOps ?
	
		Teams involved in SDLC Process :
		
			- DevOps Team :
				- Infra-Structure Management Team   20 Test Servers -->
				- Application Development Team 		
				- Testing Team 
				- Release Management Team
				- Production Support Team 
				- Production Monitoring Team 
				- Security Administration Team 
				
			
		DevOps Stages :	

			- Continous Development :
			
				- It is a capability of the Development Team to Continously develop the Applications and improve the productivity of the Developers.
				
					Role of Developer :
					
						- Create Source Codes  
						- Build the Code - Compile and create artifacts(Binaries - *.exec/*.dll/*.war/*.jar)
						- Unit Testing 
						- Promote the Changes to Test Environments for further Testing
						- Notify the Testing Teams thru Email 
						
					On DevOps Perspective - Using DevOps Process ::
					
						- Create the Source Code
						- Save/Commit the Source Code Changes to a Source Code Repository(GITHUB/GITLAB/AWS CodeCommit/Az Repo)
						
						Thru DevOps Tools Automate: 
						
						- Build the Code - Compile and create artifacts(Binaries - *.exec/*.dll/*.war/*.jar)
						- Unit Testing 
						- Promote the Changes to Test Environments for further Testing
						- Notify the Testing Teams thru Email 

					Tools :
						
						IDEs - Integrated Development Environments 
						- Eclipse based IDEs, Visual Studio Code, Visual Studio, Pycharm
						
						- Build Tools - Maven/Gradle, .Net SDK, Python
						
						- Unit Testing Tools - Junit, TestNG - 20 Test Cases 
			
			- Continous Integration :
				- It is a capability of the Development Team to Continously Integrate their code changes for further testing without impacting others' changes.

						Thru DevOps Tools Automate: 
						
						- Save/Commit the Source Code Changes to a Source Code Repository(GITHUB/GITLAB/AWS CodeCommit/Az Repo)						
						- Build the Code - Compile and create artifacts(Binaries - *.exec/*.dll/*.war/*.jar)
						- Unit Testing 
						- Promote the Changes to Test Environments for further Testing
						- Notify the Testing Teams thru Email 
						
				- Tools :
				
					IDEs, Jenkins, AWS Code Pipeline, AWS CodeBuild, Docker, Kubernetes
						
			- Continous Testing :
				- It is used to test and validate the code changes, Thru devops, we can integrate the testing tools and automate the end-to-end testing.
				
				Tools : Junit/TestNG/Selenium - Jenkins, AWS Pipeline
			
			- Continous Delivery / Deployment :
			
				- Both Continous Delivery/Deployment are used for Production Releases.
	
				- Continous Delivery :
					- It expects Manual Approvals for production release
					- Might leads to downtime.

				Eg.: 
				
					Financial / Banking Domain - Core Business 
					
					Online Banking :::
						Down the service - Production Release Window (Off-Business/Usage)
						4 - 6 Hrs. 
						Production Level Testing
						- Fix the issue 
						- Revert the changes under worst case

					
				- Continous Deployment :
					- It Doesn't expect any Manual Approvals for production release.
					- Production Release can be fully automated without any manual intervension
					- Zero Downtime.	

				- To Achieve Continous Deloyment the Application Architecture plays an important role.
				
					- Monolith Application Architecture
						- It is a tightly coupled Application
						- All the dependencies/functions are tightly coupled together
					
					- Micro-Service Based Application Architecture
						- Loosely Coupled Applications
						- All the dependencies/functions are considered as individual Micro-Service, which can be independently developed, build, testing and released to production.
						
				Continous Deployment can be achieved only using Micro-Service based Application Architecture
				
				Eg.: 
				
					Facebook/Netflix/amazon.com 
					
					Matured Level of DevOps using a complete Shift-Left Approach 
			
			
				CI/CD Pipeline --> AWS Pipeline / Jenkins / gitlab-ci / Az Pipelines
			
			- Continous Monitoring :
			
				- This is to monitor the Infra-Structure and Applications running in Production Environments.
				
				Tools :
							www.awazon.com --> 10000 users accessing the site 
					
					Production Support/Monitoring Team :
					
						Infra-Structure Monitoring
							- AWS Cloud watch 
							- Dynatrace / Prometheus / Grafana
							
						Applications Monitoring 
							- App-Dynamics 
							- Data-Dog
			
			- Infra-Structure Management Team :
			
				Provisioning/Creating the Servers 
					- AWS Cloudformation / Terraform 
				
				Configure the Servers 
					- AWS Cloudformation / Ansible / Chef / Puppet
					
		Environments :
		
			Non-Prod Environments													Production Environments 
			
				Dev Environment	(servers/VMs)
				Build Environment
				Test Environments
					QA 
					UAT									 =======>						Prod Environments 
					
	
		DevOps Lifecyle :::
		
			Requirement Analysis		ALM Tools - Application Lifecycle Management Tools - JIRA/Az Boards
			Design 
			
			Coding/Developement 		IDEs - Eclipse Based IDEs
			
			Build 
			
			Unit Testing 
			
			Promote the Changes to QA Environment
			
			QA Testing 
			
			Promote the Changes to UAT Environment
			
			UAT Testing 			
			
			Promote the Changes to PROD Environment
			
			PROD Level Testing 		
			
			Continous Monitoring 		AWS Cloud Watch -- gives some feedback
			
		
			
		DevOps Tools :

			Open-Source DevOps Tools ::
			
				- Jenkins(CICD),GITHUB,Ansible,Docker,Kubernetes,Terraform,Prometheus,Grafana,Jfrog,JIRA
				
			Managed Services ::
			
				AWS 	--> AWS CodeCommit/CodePipeline/CodeBuild/CodeDeploy/CodeTest/CodeArtifacts/CodeStar/CodeGuru
				
				Azure 	--> Azure DevOps Service -- AzBoards/AzPipeline/AzTest/AzArtifacts/AzRepo
				
				GCP 	--> DevOps Service
				
				
	
	- Create GITHUB Account 					# https://github.com/
	
	- Install GIT Client in Local Machine 		# https://git-scm.com/downloads
	
	- Install Visual Studio Code 				# https://code.visualstudio.com/download
	
	- AWS Free-Tier Account						# https://aws.amazon.com/console/
	
	
	DevOps Team :
	
		DevOps Asso. --> Sr. DevOps Asso
		DevOps Engg.  --> Sr. DEngg
		DevOps Lead   --> Sr. DLead 
		DevOps Architect --> Sr. DArchitect
		DevOps Consultant --> Sr. DConsultant 
		SRE 	
	
	- Scripting Languages :
	
		 - Shell Scripting / YAML / JSON / Python / Groovy

######################
Day 2 - 26th May 2024
######################

	- Create GITHUB Account 					# https://github.com/
	
	- Install GIT Client in Local Machine 		# https://git-scm.com/downloads
	
	- Install Visual Studio Code 				# https://code.visualstudio.com/download
	
	- AWS Free-Tier Account						# https://aws.amazon.com/console/
	
	
	DevOps on Cloud :::
	
	AWS DevOps Services ::
	
			AWS 	--> AWS CodeCommit/CodePipeline/CodeBuild/CodeDeploy/CodeTest/CodeArtifacts/CodeStar/CodeGuru
	
			AWS Free-Tier Account		# https://aws.amazon.com/console/
			
			Login to AWS Console :::
			
				root user : Full Admin Access.
					- Email_ID 
					- Password
			
			
			AWS Cloud Platform :::
			
				All the AWS Resources/Service 
					Virtuals Machines/ Storage / Networking 
					
					Regions		- Different Geo. locations.
						Availability Zones (Data Centres)
						
						
						
						Create VM ??? Terraform
						
				On-prem
				
				Multi-cloud --> AWS - cloudformation / Azure / IBM Cloud 
				
			Billing Dashboard 
			Regions 
			How to access various services 
			Budgets 
			
				
				
		Security Management ::: 
		
			Client --> Enterprise level --> Create AWS Account - root access?
						- Teams 
						- Create individual User IDs/Groups/Roles/Policies --> IAM Service  
						
						- Code Commit - Maintain Source code Repos - Team						
						
			IAM Services --> 
				
				User 
				Group 
				Roles 
				Policies 
				
			
			RBAC :::	Role Base Access Control 
			
			Security Management :
			
				- Authentication 
				
				- Authorization 
				
				- Admin -> 
				
				
			1. To Create IAM User & attach Admin policy 
			2. Login thru this IAM User.
			
			CodeCommit/CodePipeline/CodeBuild/CodeDeploy
			
			
			Policy ---> any group / user 
			
			At Enterprise Level :::
			
				users/groups 
				
				LDAP
				
				AD 
				
				SSO
				
				Any Applications --> 
				
			MFA Authentication ::::
				
				
	DevOps On cloud ::
	
		AWS CodeCommit		- 	Used to Maintain the source code -- (compared with github/gitlab/az-repo)
		
		
		
		AWS CodeBuild 		-   Used to build the application - compile and create artifacts - *.war
								Containers as well - Docker Container  - Build Application Image 
													- ECS / ECR / EKS
		
		AWS CodeDeploy 		- 	Used to deploy the application to the target server - Web Application Servers 
		
		AWS CodePipeline 	- 	Is a called a Build Orchestration Tool 

	

	Code Commit :::
	
	
		==> git file workflow :::
		
			Import any repository to AWS CodeCommit
			
			In github 			===> 		Clone this to local repository		====> 	Push to  AWS CodeCommit 
			
			git clone github_repo in local machine 
			
			push to aws codecommit repo 
			
			Push the local repository to AWS CodeCommit 
			
			
			
			Create New Project Repo in local machine using IDEs ===>  Push to  AWS CodeCommit 

			
			
			Create : Project using Visual Studio Code.
			
			
			- Create Empty Repo in AWS CodeCommit
			
			- Open git bash terminal / VS Code Project Folder Terminal 
			
			- git clone https://github.com/Edu-AWS-DevOps-May252024/devops-java-webapp.git
			
			- git remote add awsrepo1 https://git-codecommit.ap-south-1.amazonaws.com/v1/repos/webapp1
			
			- git remote -v  
			
			- git push -u awsrepo1 master			# Push the changes to AWS CodeCommit Repo. 

  533  mkdir javaapp1
  534  cd javaapp1/
  535  git clone https://github.com/Edu-AWS-DevOps-May252024/devops-java-webapp.git
  536  cd devops-java-webapp/
  549  git remote add awsrepo1 https://git-codecommit.ap-south-1.amazonaws.com/v1/repos/webapp1
  550  git remote -v
  551  git push -u awsrepo1 master
  552  cd ..
  553  history
			
Next ::
		Code Commit 		
		Code Build 		
		Code Deploy		
		Code Artifacts

			
######################
Day 3 - 1st June 2024
######################	

	
	SDLC Automation ::
	
		Code Build 
		
		Code Deploy 
		
		Code Artifacts are maintained in s3 
		
		Code Pipeline 
		
		
		
		
		CICD Pipeline :::
		
			CI & CD
			
		DevOps Pipeline Workflow :::
		
			SCM-Checkout 
			
			Application Build (Build Server/Build Tool)
			Container Images -- Application Image Build 
			
			Target Servers :	(QA/UAT/Prod)
			Deployment (Deployment Servers/ Tools)
			
			
			
			
		Code Commit :
		
		Code Build 	:
		
			- Self Hosted Nodes			
			- Managed Nodes
			
		Code Deploy :
		
		
		build server - install jdk, mvn, git, -- VM 
		
		codebuild server - Managed Image : 
		
		
		
		S3 Bucket ::
		
			loksai-webapp-s3-bucket
			
			loksai-webapp-dir1
			
			
		source code repo:
		
		Visual Studio Code -> IDE 
			
			
		loksai-webapp-cbproj1
		
		
		
		Code Build Project :  buildspec.yaml *****
		
		Maven Project ::
		
			Maven is build tool for java application build.
			
			
			pom.xml  --> Used to maintain the dependencies/plugins the properties of the build
			
			maven Goal --> 
			
				compile 	==> Compile and throw the status
				test 		==> Compile and perform unit testing 
				package		==> Compile, test and create artifacts in the target
				clean 		==> used to clean the target folder 
				
				
			S3 AWS --
			
			Jfrog Artifactory 
			
			Az Artifacts
			
			*.war
			
			
			Deploment Strategy ::::
			
			
			In-Place Deployment Strategy 		

				Deployment Group :						Upgrade to mywebapp_v2.0
				
														Phase1				Phase1
				                                                            
					serv1	mywebapp_v1.0				mywebapp_v2.0       mywebapp_v2.0
					serv2	mywebapp_v1.0				mywebapp_v2.0       mywebapp_v2.0
					serv3	mywebapp_v1.0				mywebapp_v1.0       mywebapp_v2.0
					serv4	mywebapp_v1.0               mywebapp_v1.0       mywebapp_v2.0
					serv5	mywebapp_v1.0               mywebapp_v1.0       mywebapp_v2.0			
			
			
			
			Blue-Green Deploment Strategy		
			
			
				**LIVE Server:		5 server
				
				**mywebapp_v1.0					====>	mywebapp_v2.0	

 

				PASSIVE Server :::
			
				mywebapp_v2.0					====> becomes ACTIVE/LIVE Server
			
			
			Rolling-update Strategy
			
		
		https://docs.aws.amazon.com/codedeploy/latest/userguide/resource-kit.html#resource-kit-bucket-names
		
		
		Deployment 
		
	
Next :::		

	Environments ::
	
	dev 		coding 
	
	build 		build server created artifacts & saved in s3-bucket
	
	
	Target server 
		qa 			--> -- *.war 		- Tomcat Server 
		
		uat 
		
		prod 

**************************************************************************************************************************

			
######################
Day 4 - 2nd June 2024
######################	


	AWS Code Deploy

	AWS Code Pipeline 


	Deployment :::
	
		Process of Copying application artifacts to the target environment
		
		s3 Bucket *.war		====> Copied the artifacts to Target Server --> /usr/share/tomcat/webapps
		
	
		Launching***
	
		


		https://docs.aws.amazon.com/codebuild/latest/userguide/build-spec-ref.html
		
		Code_Deploy 
		https://docs.aws.amazon.com/codedeploy/latest/userguide/reference-appspec-file.html
		
		s3://loksai-webapp-s3-bucket/loksai-webapp-dir1/loksai-webapp-cbproj1.zip
		
		
		www.gmail.com 			ROOT - Index.html 
			
		inbox 				www.gmail.com/inbox		# Path based Routing
		sent 
		trash


	Container Images :::
	
		ECS 
		
		ECR 
		
		EKS 
		
	Deployment :
	
		VM - EC2 Instance 
		
		Container 
		
		Lambda 
		
	IAC
	
	Deployment -- 
	
	Container ::
	
		Docker Containers & Container Images ????
		
		
	Containerization :::
		
		- It is a process of packaging the application along with its dependencies.
		
		
	Scenario 1 :
	
		Developers' Build/Deployment :	1 
		
			Eclipse IDE 		Dev Environment
			
				Create src code, version control it using git, integrate tomcat server and unit test my application in Local Machine.
				
					jdk17, tomcat8.5
					
					jdk11, tomcat9
					
					Openjdk11, tomcat10
				
					Build - Artifact  								mywebapp.war 
					
					
					create code
					
					build  --			 mywebapp.war_v1.0 
					
					
						Package (mywebapp.war_v1.0,jdk17, tomcat8.5)		---> mywebapp_img:v1.0

						Package (mywebapp.war_v1.0,jdk11, tomcat7)			---> mywebapp_img:v2.0

						Package (mywebapp.war_v1.0,Openjdk17, tomcat9)		---> mywebapp_img:v3.0
						
						ECS :
						
						This Image will be stored/Version Controlled in the Container Registry(ECR,DockerHub)
				
				Promote the changes to target environment 
				
				QA Environment 		--> jdk8, tomcat7 -->	jdk, tomcat	 ---> 	mywebapp.war  - jdk17, tomcat8.5
				
									mywebapp_img:v1.0			
				
				Monolith --> 
				
							-- Compatibility issue. 
							
							
			Working with Containerization :::
			
				Terminologies :::
				
					Image 					: 	A Static File that defines the application and its dependencies
												It is Non-Executable 
												It composed of various layers / Instructions
								
					Container 				:	Executable of Container Images
					
					Container Engine 		:	Used to Create/Manage the Container Images and Containers 
												Docker Engine 
										
					Container Registry 		:	Is to manage/version control the Container Images 
												Dockerhub / ECR 
											
					Container Repository	:	Subset of Container Registry
					
					
		
	Scenario 2 :
	
		Infra-Structure Perspective :
		
			Containerization :::
				- Is used to reduce the no. of VMs 
		
		Build Server :::	Code Build 
		
				VM - Build Server 
					Install Container Engine 
					
						- Container1 - jdk
						- Container2 - .net
		
			50 Types of Applications to be built
			
				jdk
				.net 
				python
				angular
				nodejs 
		
		Deployment Server :::	Code Deploy
		
				jdk
				.net 
				python
				angular
				nodejs 		
				

		DevOps Team 
		
		CI-CD 
			Container & Kubernetes Tools 
		
		Infra-Structure		
			Terraform 


		Virtual Machine :::
			- VMs are Hardware level Virtualization 
			- VMs are used to run the Operating System
			- It consume more space and time to start the Application
			- VM will be consuming the resources, even if there is not task/application running 
		
		Container :::
		
			- Containers are OS level Virtualization
			- It is used to run the Application/Task. NOT to run Operating System
			- Once the Application/Task is completed it will immediately go to exit state and release all the resources
			
		
		
		How to Create/Build Container Images :::
		
			Input : *.war ==> Artifacts - s3 Bucket 
			
			Image Build : 
			
				Dockerfile / ImageBuildfile :::
					- Composed of various instructions to build the layers of Image.
					- will be part of the sourcecode repository
					
					ECS :::
					
					Instruction to build the Image:
					
					FROM 		# Used to Identify the base Image 
					
					COPY 		# Copy the files/artifacts from the host volume to container volume

					CP 			# Copy the files/folders within the container volume
					
					ADD			# Copy the files/artifacts from the host volume to container volume
								# Copy the files/folders from Internet to container volume 
								
					WORKDIR		# used identify the current working dir
					
					EXPOSE 		# to expose the container port
					
					ENV 		# Used to have Environmental variable 
					
					RUN			# Run/Execute the package managers like yum/apt/dnf
					
					CMD			# Set the start-up/task command to the container
								# It can be change at run-time 
					
					ENTRYPOINT	# Set the start-up/task command to the container
								# It cannot be changed at run-time 
					
					
					
					image_name:v1
					
					
					
					ENTRYPOINT echo "Hello"

#########################################################


craete aws repo 
create s3 bucket 

got to roles add codecommit to codebuild role

			
	webapps3-policy
	
	/opt codedeploy-agent
	
Create SRC_CODE REPO 

Create s3 bucket 

Build Project Role Name :
	codebuild-sp-webapp-proj1-service-role

sp-webapp-bucket
sp-webapp-dir

sp-webapp-proj1


test the build

Create a service role for codeDeploy.

goto IAM Service 

roles :

create role - aws service -- Code Deploy --> add default permissions --> sp-webapp-cd-role
verify trust relation

Create an IAM Instance profile.


create policy:

JSON :

{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Sid": "VisualEditor0",
            "Effect": "Allow",
            "Action": "s3:*",
            "Resource": "*"
        }
    ]
}

sp-webapp-CD-EC2-Policy

roles :

Create Role for EC2 based on this CD-EC2-Policy

create role - aws service - ec2 -- add cd-ec2-policy permission --> sp-webapp-CD-EC2-role

create webapp server 

attach iam policy 

install jdk, tomcat and CD Agent 
then validate 

goto code deploy :

create application 
sp-webapp-test1

Code Deployment Group

got to application create deployment 

in Revision location

enter s3 bucket - dir - project and select copy s3 url

sp-webapp-deploygrp1

	AWS Code Pipeline 
	
	2. terraform / Cloudformation 

	

######################
Day 5 - 8th June 2024
######################					
					
					
	CI-CD
	
		ECR / Dockhub 
		
	Create Docker Container Images using Dockerfile 
	Docker CLI
	Publish it to Container Registry - ECR 
	
	Build Environment :
	
		*.war 
		Application Image 
		
		Build_Server - Install Docker Engine		# https://docs.docker.com/engine/install/ubuntu/
		
		
		 apt install docker.io -y			# Install on Ubuntu Machine

	Terminologies :
	
	Docker CLI Command 
	
		docker images 		# list of images present in local machine 
		
		docker ps 			# list of running containers
		
		docker ps -a		# list of running containers as well the containers in stopped state 
		
		docker run 			# Create and execute a new container based on container image 
		
			Modes of Container Execution :
			
				- Foreground 
				
				- Background 
				
				- Interactive Mode 
				
		Build Docker Image :::

			docker build -t <new_Image_Name> .
			
			
			ECS 
			
			ECR 
			
			aws code pipeline 
				
				
FROM ubuntu:16.04
# Install dependencies 
RUN apt-get update 
RUN apt-get -y install apache2
# Install apache and write hello world message 
RUN echo 'Hello World!' > /var/www/html/index.html
# Configure apache 
RUN echo '. /etc/apache2/envvars' > /root/run_apache.sh 
RUN echo 'mkdir -p /var/run/apache2' >> /root/run_apache.sh 
RUN echo 'mkdir -p /var/lock/apache2' >> /root/run_apache.sh 
RUN echo '/usr/sbin/apache2 -D FOREGROUND' >> /root/run_apache.sh 
RUN chmod 755 /root/run_apache.sh
EXPOSE 80
CMD /root/run_apache.sh	
					
		
FROM tomcat:8.0
COPY ./target/loksaieta.war /usr/local/tomcat/webapps
EXPOSE 8080
			
		 

	- goto ECR 
	- Create new Private Container Repository
	
	471112633224.dkr.ecr.ap-south-1.amazonaws.com/awsdemocrepo1	


	- Install awscli in the build server 
	
		atp install awscli -y 
		


ap-south-1


#Get ECR Login Credentials :

aws ecr get-login --no-include-email

docker tag mywebappimg 471112633224.dkr.ecr.ap-south-1.amazonaws.com/awsdemocrepo1

#docker tag awsdemocrepo1:latest 471112633224.dkr.ecr.ap-south-1.amazonaws.com/awsdemocrepo1:latest

docker push 471112633224.dkr.ecr.ap-south-1.amazonaws.com/awsdemocrepo1


IAC - Infra-Structure As Code - Tools :::

	Dynamically Create the Servers/ Target environments 
	Configure the target environment
	
	Used for regular build/release cycles  - July Rel.
	
		Dev 
		
		Build 
		
		QA 
		
		UAT 		===> 		Prod 
		
	
		hotfix branch :			Dynamically Create a build/test environments
		
		- prod code 
		- make incremental changes 
		- Build ?
		- Test ?
		
		Regular build cycle :
		
			dev - build - qa - uat - pre-prod/stage  --> prod 
			
		Hotfix/bugfix/adhoc-changes 

			hotfix/bugfix envi - pre-prod/stage --> prod 			
		
		
		Automation - IAC Tools :
		
			- AWS 	- Cloud Formation Templates - scripts can be written yaml/json file format
			- AZURE - ARM	
			
			- Terraform
		Pipeline :
		
			SCM_Checkout 
			
				download the appln. src_code
				CFT - scripts


{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Creating a new S3 bucket",
    "Resources": {
      "s3Bucket": {
        "Type": "AWS::S3::Bucket",
        "Properties": {
          "BucketName": "s3-cicds3bucket01"
        }
      }
    }
}







































